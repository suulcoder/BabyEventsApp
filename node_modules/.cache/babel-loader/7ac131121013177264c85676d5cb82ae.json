{"ast":null,"code":"import { combineReducers } from 'redux';\nimport * as types from '../types/events';\n\nconst byId = (state = {}, action) => {\n  switch (action.type) {\n    case types.event_added:\n      return { ...state,\n        [action.payload.elemnt.id]: action.payload\n      };\n\n    case types.event_deleted:\n      const currState = state;\n      delete currState[action.payload];\n      return currState;\n\n    default:\n      return state;\n  }\n};\n\nconst order = (state = [], action) => {\n  switch (action.type) {\n    case types.event_added:\n      return [...state, action.payload.element.id];\n\n    case types.event_deleted:\n      return state.filter(id => id !== action.payload);\n\n    default:\n      return state;\n  }\n};\n\nconst events = combineReducers({\n  byId,\n  order\n});\nexport default events;\nexport const getEvent = (state, id) => state.byId[id];\nexport const getAllEvents = state => state.order.map(id => getEvent(state, id)).filter(event => event != null);\nexport const getEventsbyIDs = (state, ids) => state.order.map(id => {\n  if (ids.includes(id)) {\n    return getEvent(state, id);\n  }\n\n  return null;\n}).filter(event => event != null);\nexport const getLastEvent = state => state.order.reverse()[0];","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/DISEÃ‘O WEB/BabyEventsApp/src/reducers/events.js"],"names":["combineReducers","types","byId","state","action","type","event_added","payload","elemnt","id","event_deleted","currState","order","element","filter","events","getEvent","getAllEvents","map","event","getEventsbyIDs","ids","includes","getLastEvent","reverse"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,iBAAvB;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAC,EAAP,EAAUC,MAAV,KAAqB;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACK,WAAX;AACI,aAAO,EAAC,GAAGH,KAAJ;AAAU,SAACC,MAAM,CAACG,OAAP,CAAeC,MAAf,CAAsBC,EAAvB,GAA2BL,MAAM,CAACG;AAA5C,OAAP;;AACJ,SAAKN,KAAK,CAACS,aAAX;AACI,YAAMC,SAAS,GAAGR,KAAlB;AACA,aAAOQ,SAAS,CAACP,MAAM,CAACG,OAAR,CAAhB;AACA,aAAOI,SAAP;;AACJ;AACI,aAAOR,KAAP;AARR;AAUH,CAXD;;AAaA,MAAMS,KAAK,GAAG,CAACT,KAAK,GAAC,EAAP,EAAUC,MAAV,KAAqB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,KAAK,CAACK,WAAX;AACI,aAAO,CAAC,GAAGH,KAAJ,EAAUC,MAAM,CAACG,OAAP,CAAeM,OAAf,CAAuBJ,EAAjC,CAAP;;AACJ,SAAKR,KAAK,CAACS,aAAX;AACI,aAAOP,KAAK,CAACW,MAAN,CAAaL,EAAE,IAAEA,EAAE,KAAGL,MAAM,CAACG,OAA7B,CAAP;;AACJ;AACI,aAAOJ,KAAP;AANR;AAQH,CATD;;AAWA,MAAMY,MAAM,GAAGf,eAAe,CAAC;AAC3BE,EAAAA,IAD2B;AAE3BU,EAAAA;AAF2B,CAAD,CAA9B;AAKA,eAAeG,MAAf;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACb,KAAD,EAAOM,EAAP,KAAcN,KAAK,CAACD,IAAN,CAAWO,EAAX,CAA/B;AACP,OAAO,MAAMQ,YAAY,GAAId,KAAD,IAAWA,KAAK,CAACS,KAAN,CAAYM,GAAZ,CACnCT,EAAE,IAAEO,QAAQ,CAACb,KAAD,EAAOM,EAAP,CADuB,EAEjCK,MAFiC,CAE1BK,KAAK,IAAEA,KAAK,IAAE,IAFY,CAAhC;AAGP,OAAO,MAAMC,cAAc,GAAG,CAACjB,KAAD,EAAOkB,GAAP,KAAelB,KAAK,CAACS,KAAN,CAAYM,GAAZ,CAAgBT,EAAE,IAAI;AAC/D,MAAGY,GAAG,CAACC,QAAJ,CAAab,EAAb,CAAH,EAAoB;AAChB,WAAOO,QAAQ,CAACb,KAAD,EAAOM,EAAP,CAAf;AACH;;AACD,SAAO,IAAP;AACC,CALwC,EAKtCK,MALsC,CAK/BK,KAAK,IAAEA,KAAK,IAAE,IALiB,CAAtC;AAMP,OAAO,MAAMI,YAAY,GAAIpB,KAAD,IAAWA,KAAK,CAACS,KAAN,CAAYY,OAAZ,GAAsB,CAAtB,CAAhC","sourcesContent":["import { combineReducers } from 'redux';\nimport * as types from '../types/events'\n\nconst byId = (state={},action) => {\n    switch (action.type) {\n        case types.event_added:\n            return {...state,[action.payload.elemnt.id]:action.payload}\n        case types.event_deleted:\n            const currState = state\n            delete currState[action.payload]\n            return currState\n        default:\n            return state\n    }\n}\n\nconst order = (state=[],action) => {\n    switch (action.type) {\n        case types.event_added:\n            return [...state,action.payload.element.id]\n        case types.event_deleted:\n            return state.filter(id=>id!==action.payload)\n        default:\n            return state\n    }\n}\n\nconst events = combineReducers({\n    byId,\n    order,\n})\n\nexport default events\n\nexport const getEvent = (state,id) => state.byId[id]\nexport const getAllEvents = (state) => state.order.map(\n    id=>getEvent(state,id)\n    ).filter(event=>event!=null)\nexport const getEventsbyIDs = (state,ids) => state.order.map(id => {\n    if(ids.includes(id)){\n        return getEvent(state,id)\n    }\n    return null\n    }).filter(event=>event!=null)\nexport const getLastEvent = (state) => state.order.reverse()[0]"]},"metadata":{},"sourceType":"module"}