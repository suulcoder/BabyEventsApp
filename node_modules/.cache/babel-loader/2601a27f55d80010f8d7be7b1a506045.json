{"ast":null,"code":"import { combineReducers } from 'redux';\nimport * as types from '../types/babies';\nimport * as exTypes from '../types/events';\n\nconst byId = (state = {}, action) => {\n  switch (action.type) {\n    case types.baby_added:\n      return { ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case exTypes.event_added:\n      const events = [...state[action.payload.id][Object.keys(state[action.payload.id])[3]], action.payload.element.id];\n      return { ...state,\n        [action.payload.id]: { ...state[action.payload.id],\n          events\n        }\n      };\n\n    case exTypes.event_deleted:\n      console.log(action.payload.id);\n      const currevents = [...state[action.payload.baby][Object.keys(state[action.payload.baby])[3]]].filter(id => id !== action.payload.id);\n      console.log(currevents);\n      return { ...state,\n        [action.payload.baby]: { ...state[action.payload.baby],\n          currevents\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst order = (state = [], action) => {\n  switch (action.type) {\n    case types.baby_added:\n      return [...state, action.payload.id];\n\n    default:\n      return state;\n  }\n};\n\nconst selected = (state = 0, action) => {\n  switch (action.type) {\n    case types.baby_selected:\n      return action.payload;\n\n    case types.baby_added:\n      return action.payload.id;\n\n    default:\n      return state;\n  }\n};\n\nconst babies = combineReducers({\n  byId,\n  order,\n  selected\n});\nexport default babies;\nexport const getBaby = (state, id) => state.byId[id];\nexport const getAllBabies = state => state.order.reverse().map(id => getBaby(state, id)).filter(baby => baby != null);\nexport const getSelectedBaby = state => state.selected;","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/DISEÃ‘O WEB/BabyEventsApp/src/reducers/babies.js"],"names":["combineReducers","types","exTypes","byId","state","action","type","baby_added","payload","id","event_added","events","Object","keys","element","event_deleted","console","log","currevents","baby","filter","order","selected","baby_selected","babies","getBaby","getAllBabies","reverse","map","getSelectedBaby"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport * as types from '../types/babies'\nimport * as exTypes from '../types/events'\n\nconst byId = (state={},action) => {\n    switch (action.type) {\n        case types.baby_added:\n            return {...state,[action.payload.id]:action.payload}\n        case exTypes.event_added:\n            const events = [...state[action.payload.id][Object.keys(state[action.payload.id])[3]],action.payload.element.id]\n            return {...state,\n                [action.payload.id]: {\n                  ...state[action.payload.id],\n                  events\n                }}\n        case exTypes.event_deleted:\n            console.log(action.payload.id)\n            const currevents = [...state[action.payload.baby][Object.keys(state[action.payload.baby])[3]]].filter(id=>id!==action.payload.id)\n            console.log(currevents)\n            return ({...state,\n                [action.payload.baby]: {\n                  ...state[action.payload.baby],\n                  currevents\n                }})\n        default:\n            return state\n    }\n}\n\nconst order = (state=[],action) => {\n    switch (action.type) {\n        case types.baby_added:\n            return [...state,action.payload.id]\n        default:\n            return state\n    }\n}\n\nconst selected = (state=0,action) =>{\n    switch (action.type) {\n        case types.baby_selected:\n            return action.payload\n        case types.baby_added:\n            return action.payload.id\n        default:\n            return state\n    }\n}\n\nconst babies = combineReducers({\n    byId,\n    order,\n    selected\n})\n\nexport default babies\n\nexport const getBaby = (state,id) => state.byId[id]\nexport const getAllBabies = (state) => state.order.reverse().map(\n    id=>getBaby(state,id)\n    ).filter(baby=>baby!=null)\nexport const getSelectedBaby = state => state.selected;"]},"metadata":{},"sourceType":"module"}